
Types of Datatypes
1. Primitive Datatype : Number, String, Boolean
2. Non-primitive Datatype : Array, Object

1. Copy by Value 
    => Take different value for different reference
2. Copy by reference 
    => Take same value for for all the assigned references 
    => Non primitive Datatypes behave Copy by reference 
    => To overcome Copy by reference we can use Spread Operator 
3. Scope (let, var, const)
    => let : let is a block / local scope
        a. Declarations are only block scope, 
        If initialized in inner scope it can be accessed in the outer scope where declared (Example 1)
        b. Let can't be re-declared, It can be re-assigned 
    => var : var is a global scope 
        a. var can be re-declared and re-assigned 
    => const : const is a block / local scope
        a. Declaration and Initialization should happen at the same line 
        b. const can't be re-assigned 

4. Variable Hoisting:
    => Declarations are moved/hoisted to the top of the file, Initialization is not hoisted 
    => let and const will not be hoisted, only var is hoisted 
    => If we don't declare var then automatic declaration and hoisting will happen.
    => Automatic declaration will not happen when the same variable is declared with let / const in the same scope.

5. API : Application Programming Interface 
    => Communication between frontend and backend
    HTTP Methods
        a. GET : To get data from backend 
            No req.body
        b. POST : To insert data to backend 
            req.body will be there 
            No url parameters
        c. PUT : To update data in backend 
            req.body will be there 
            Url Parameters will be there 
        d. DELETE : To delete entire Object / data in backend 
            No req.body 
            Url parameters will be there

6. Functions 
    => Frequently repeated task can be written inside function 
    => Code Reusability 
    => Function returns the output
    => We cann return whatever datatype from the function 
    => Lines after return will not execute

// Task 
1. Write a function to return only odd numbers from an array 

7. Anonymous Function 
    => Functions without a name and assigned to a variable is Anonymous Functions 
8. Arrow Functions 
    => Arrow Function is introduced in ES7, which is used for latest coding
    => Memory Optimization 
    => Arrow Function is written without a function keyword and with a arrow syntax 
9. IIFE 
    => IIFE is executed directly and immediately called 
    => IIFE is not assigned to a variable or called with a function name 

10. This keyword Accessibility
    => This keyword inside arrow function in object or method will points to window object 
    => This keyword in normal function will point to its parent object (point to the object where it belongs)

11. Class:
    => Class is a collection of Constructor and Class Methods 
    => Class is a blueprint to process the details

12. Object:
    => Object is an instance of Class 
    => We can create object for classes by using the keyword new ClassName();
    => We can create n number of objects for a class 
    => Class Methods can be called by class objects 
    
12. Constructor:
    => Constructor is a default function executed (if exists), when class object is created
    => Params for the Constructor can be passed while creating a object.
        new ClassName(params1, params2, .... paramsn)
    => If any value assigned with this keyword either in Constructor or in any function,
        it can be accessed all over the class 

13. Inheritance 
14. Getter, Setter 
    => Getter is a property of the object, if we access getter it will print the returned output
    => Setter is a property of the Object
    => Setter can be assigned value like other properties
    => Instead of function Getter and Setter is more light weighted 

15. .map() 
    => Map function will loop through array elements 
    => Operations has to be done in map function and that output can be returned 
    => Map function in array will not channge it's own value, instead it will return another output array.

16. .filter() 
    => Filter function will loop through array elements 
    => Conditions or Boolean values can be returned inside filter function. 
    => Filter function in array will not from it's parent arraay, 
        instead it will return another filtered output array.

17. .reduce()
    => Reduce function will loop through array elements 
    => Reduce function will accumulate the operated values in each iteration. 
    => The default value for the accumulator is 0, 
        if we want to change the value then 
        we can give the accumulator value in the second parameter of reduce function
    => Finally reduce function will return the accumulated value output 


Don't want to use :  (later version)
for loop
for ... of
for ... in
Normal Functionn 

Want to use  (ES6 version)
.map    // Used in array 
.forEach   //
.filter    //
Arrow function 